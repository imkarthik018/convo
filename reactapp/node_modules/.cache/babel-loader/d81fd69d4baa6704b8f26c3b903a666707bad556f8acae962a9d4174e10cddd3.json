{"ast":null,"code":"import axios from 'axios';\n\n// Force localhost for development\nconst API_BASE_URL = 'http://localhost:8083/api/chats';\n\n// Configure axios to handle errors globally\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// Log the API URL for debugging\nconsole.log('API Base URL:', API_BASE_URL);\n\n// Helper function to handle errors\nconst handleError = error => {\n  if (error.response) {\n    // Server responded with error\n    console.error('API Error:', error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // Request made but no response\n    console.error('Network Error:', error.request);\n    throw new Error('Unable to connect to the server. Please ensure the backend is running.');\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n    throw error;\n  }\n};\nexport const addConversation = async conversation => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/addConversation`, conversation);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const getAllConversations = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/allConversations`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const getConversationsByCategory = async category => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/byCategory?category=${category}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const getConversationsSortedByTime = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/sortedByTime`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const deleteConversation = async id => {\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/deleteConversation/${id}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const updateConversation = async (id, conversation) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/updateConversation/${id}`, conversation);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Pagination API calls\nexport const getAllConversationsPaginated = async (page = 0, size = 5, sortBy = 'timestamp', sortDir = 'desc') => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/paginated?page=${page}&size=${size}&sortBy=${sortBy}&sortDir=${sortDir}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const getConversationsByCategoryPaginated = async (category, page = 0, size = 5, sortBy = 'timestamp', sortDir = 'desc') => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/byCategory/paginated?category=${category}&page=${page}&size=${size}&sortBy=${sortBy}&sortDir=${sortDir}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nexport const getConversationsSortedByTimePaginated = async (page = 0, size = 5) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/sortedByTime/paginated?page=${page}&size=${size}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Seed dummy data\nexport const seedDummyData = async () => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/seedData`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","defaults","headers","common","console","log","handleError","error","response","data","Error","message","request","addConversation","conversation","post","getAllConversations","get","getConversationsByCategory","category","getConversationsSortedByTime","deleteConversation","id","delete","updateConversation","put","getAllConversationsPaginated","page","size","sortBy","sortDir","getConversationsByCategoryPaginated","getConversationsSortedByTimePaginated","seedDummyData"],"sources":["C:/Users/vjkar/OneDrive/Desktop/convo/reactapp/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Force localhost for development\nconst API_BASE_URL = 'http://localhost:8083/api/chats';\n\n// Configure axios to handle errors globally\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// Log the API URL for debugging\nconsole.log('API Base URL:', API_BASE_URL);\n\n// Helper function to handle errors\nconst handleError = (error) => {\n  if (error.response) {\n    // Server responded with error\n    console.error('API Error:', error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // Request made but no response\n    console.error('Network Error:', error.request);\n    throw new Error('Unable to connect to the server. Please ensure the backend is running.');\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n    throw error;\n  }\n};\n\nexport const addConversation = async (conversation) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/addConversation`, conversation);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const getAllConversations = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/allConversations`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const getConversationsByCategory = async (category) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/byCategory?category=${category}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const getConversationsSortedByTime = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/sortedByTime`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const deleteConversation = async (id) => {\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/deleteConversation/${id}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const updateConversation = async (id, conversation) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/updateConversation/${id}`, conversation);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Pagination API calls\nexport const getAllConversationsPaginated = async (page = 0, size = 5, sortBy = 'timestamp', sortDir = 'desc') => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/paginated?page=${page}&size=${size}&sortBy=${sortBy}&sortDir=${sortDir}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const getConversationsByCategoryPaginated = async (category, page = 0, size = 5, sortBy = 'timestamp', sortDir = 'desc') => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/byCategory/paginated?category=${category}&page=${page}&size=${size}&sortBy=${sortBy}&sortDir=${sortDir}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nexport const getConversationsSortedByTimePaginated = async (page = 0, size = 5) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/sortedByTime/paginated?page=${page}&size=${size}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Seed dummy data\nexport const seedDummyData = async () => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/seedData`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}